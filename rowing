"""
rowing_capture.py
─────────────────
Log joint angles for every frame of a rowing video stream.

Usage
-----
python rowing_capture.py my_row.mp4
python rowing_capture.py 0            # webcam fallback

Outputs a CSV of angles and an optional annotated MP4.

Dependencies:
    pip install opencv-python mediapipe numpy pandas
"""
import argparse
from datetime import datetime
import cv2
import mediapipe as mp
import numpy as np
import pandas as pd

# ── helper geometry ────────────────────────────────────────────────────
def _vec(p1, p2):
    return np.array([p2.x - p1.x, p2.y - p1.y, p2.z - p1.z])

def _angle(a, b, c):
    ba, bc = _vec(b, a), _vec(b, c)
    cosine = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc) + 1e-6)
    return np.degrees(np.arccos(np.clip(cosine, -1.0, 1.0)))

# ── main capture routine ───────────────────────────────────────────────
def capture(video_path, write_annotated=True):
    cap = cv2.VideoCapture(video_path)
    width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps    = cap.get(cv2.CAP_PROP_FPS) or 30

    if write_annotated:
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(
            f"annotated_{datetime.now():%Y%m%d_%H%M%S}.mp4",
            fourcc, fps, (width, height)
        )

    mp_pose = mp.solutions.pose.Pose(
        static_image_mode=False,
        model_complexity=1,
        enable_segmentation=False,
        min_detection_confidence=0.5,
        min_tracking_confidence=0.5,
    )

    ANGLE_DEFNS = {
        "Knee": (
            mp.solutions.pose.PoseLandmark.HIP,
            mp.solutions.pose.PoseLandmark.KNEE,
            mp.solutions.pose.PoseLandmark.ANKLE,
        ),
        "Hip": (
            mp.solutions.pose.PoseLandmark.SHOULDER,
            mp.solutions.pose.PoseLandmark.HIP,
            mp.solutions.pose.PoseLandmark.KNEE,
        ),
        "Elbow": (
            mp.solutions.pose.PoseLandmark.SHOULDER,
            mp.solutions.pose.PoseLandmark.ELBOW,
            mp.solutions.pose.PoseLandmark.WRIST,
        ),
        "Torso-Fwd": (
            mp.solutions.pose.PoseLandmark.HIP,
            mp.solutions.pose.PoseLandmark.SHOULDER,
            mp.solutions.pose.PoseLandmark.EAR,
        ),
    }

    rows = []
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        img_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        result = mp_pose.process(img_rgb)

        if result.pose_landmarks:
            lm = result.pose_landmarks.landmark
            row = {"ts": cap.get(cv2.CAP_PROP_POS_MSEC) / 1000.0}
            for idx, (name, (pA, pB, pC)) in enumerate(ANGLE_DEFNS.items()):
                theta = _angle(lm[pA], lm[pB], lm[pC])
                row[name] = theta
                cv2.putText(
                    frame,
                    f"{name}:{theta:0.1f}°",
                    (10, 25 + 20 * idx),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.6,
                    (0, 255, 0),
                    1,
                )
            rows.append(row)
            mp.solutions.drawing_utils.draw_landmarks(
                frame, result.pose_landmarks, mp.solutions.pose.POSE_CONNECTIONS
            )

        if write_annotated:
            out.write(frame)
        cv2.imshow("Rowing capture", frame)
        if cv2.waitKey(1) & 0xFF == 27:  # ESC
            break

    cap.release()
    if write_annotated:
        out.release()
    cv2.destroyAllWindows()

    df = pd.DataFrame(rows).round(2)
    csv_name = f"strokes_{datetime.now():%Y%m%d_%H%M%S}.csv"
    df.to_csv(csv_name, index=False)
    print(f"Saved {len(df)} frames → {csv_name}")

# ── entry point ────────────────────────────────────────────────────────
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Rowing joint-angle logger")
    parser.add_argument(
        "video",
        help="Path to .mp4 or 0 for webcam",
    )
    parser.add_argument(
        "--no-annotated",
        action="store_true",
        help="Skip writing annotated video",
    )
    args = parser.parse_args()
    source = 0 if args.video == "0" else args.video
    capture(source, write_annotated=not args.no_annotated)
